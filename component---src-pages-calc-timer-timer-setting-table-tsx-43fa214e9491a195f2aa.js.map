{"version":3,"sources":["webpack:///./src/pages/calc/timer/timerSetting-table.tsx"],"names":["props","optButtonDisabled","startButtonDisabled","handleShinmaButton","handleStartButton","handleRestartButton","handleShorteningButton","handleMinusButton","handleClearButton","handleNightmareButton","useState","snackPack","setSnackPack","snackbarOpen","setSnackbarOpen","messageInfo","setMessageInfo","useEffect","prev","handleSnackbarOpen","message","severity","key","Date","getTime","type","id","filename","htmlFor","onClick","disabled"],"mappings":"mzVAiOA,UA7M0B,SAACA,GACqMA,EADnK,SACmKA,EADnK,mBACzBC,EAA4LD,EADnK,kBACNE,EAAyKF,EADnK,oBACeG,EAAoJH,EADnK,mBACmCI,EAAgIJ,EADnK,kBACsDK,EAA6GL,EADnK,oBAC2EM,EAAwFN,EADnK,uBACmGO,EAAgEP,EADnK,kBACsHQ,EAA6CR,EADnK,kBACyIS,EAA0BT,EADnK,wBAUzBU,mBAVyB,IAUpDC,EAVoD,KAUzCC,EAVyC,OAWnBF,oBAXmB,GAWpDG,GAXoD,KAWtCC,GAXsC,QAYrBJ,wBAZqB,GAYpDK,GAZoD,MAYvCC,GAZuC,MAc3DC,qBAAU,WACJN,WAAJ,IAEEK,G,yWAAe,CAAD,GAAML,EAApBK,KACAJ,GAAa,mBAAUM,QAAV,MACbJ,QACSH,cAAJ,IAELG,SAED,CAACH,EAAWI,GAVfE,KAYA,IAAME,GAAqB,SAACC,EAAD,GAEzBR,GAAa,4CAAoB,CAAEQ,QAAF,EAAWC,SAAX,EAAqBC,KAAK,IAAIC,MAAOC,iBAuCxE,OACE,0BACE,sBADF,UAEE,uBACE,0BACE,0BACE,0BACE,0BACE,qBACEC,KADF,WAEEC,GAFF,qBAOA,0BACE,iBAAUC,SAAS,iCAGvB,0BACE,qBACEF,KADF,WAEEC,GAFF,qBAOA,0BACE,iBAAUC,SAAS,kCAIzB,0BACE,qBACEC,QADF,oBADF,SAOE,qBACEA,QADF,qBAnCN,SA2CE,uBACE,4BAEEC,QAAS,kBA1EnB1B,SACAgB,GAAmB,cAAnBA,UA0BE,YAqDE,0BACE,4BAEEU,QAAS,kBAAMzB,KACf0B,SAAU5B,GAzDhB,YA8DE,uBACE,0BACE,0BACE,0BACE,4BAEEwB,GAFF,cAGEG,QAAS,kBA3FvBxB,SACAc,GAAmB,iBAAnBA,SA2FcW,SAAU7B,GAEV,0BACE,iBAAU0B,SAAS,iCAGvB,qBACEC,QADF,qBAZJ,SAmBE,0BACE,4BAEEF,GAFF,iBAGEG,QAAS,kBAxGvBvB,SACAa,GAAmB,kBAAnBA,SAwGcW,SAAU7B,GAEV,0BACE,iBAAU0B,SAAS,iCAGvB,qBACEC,QADF,wBA9BJ,QAqCE,0BACE,4BAEEF,GAFF,YAGEG,QAAS,kBArHvBtB,SACAY,GAAmB,WAAnBA,YAqHcW,SAAU7B,GAEV,2BAPJ,OASE,qBACE2B,QADF,mBA/CN,SAuDE,4BAEEC,QAAS,kBA/HnBrB,SACAW,GAAmB,WAAnBA,aAgIU,gBAJF,MAKE,2BA3HR,UA+HE,uBACE,uBAAeV,sBAAuBA","file":"component---src-pages-calc-timer-timer-setting-table-tsx-43fa214e9491a195f2aa.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport 'twin.macro';\nimport { AnyImage } from \"src/components\";\nimport { Trash } from \"src/components/icons\";\nimport NightmareTabs from \"./nightmare-tabs\";\n\ninterface timerSettingTableProps {\n  triggers: string[];\n  handleTriggers: (event: React.MouseEvent<HTMLElement>, newTriggers: string[]) => void;\n  optButtonDisabled: boolean;\n  startButtonDisabled: boolean;\n  handleShinmaButton: () => void;\n  handleStartButton: () => void;\n  handleRestartButton: () => void;\n  handleShorteningButton: () => void;\n  handleMinusButton: () => void;\n  handleClearButton: () => void;\n  handleNightmareButton: (e: React.MouseEvent<HTMLElement>) => void;\n};\n\nconst TimerSettingTable = (props: timerSettingTableProps) => {\n  const { triggers, handleTriggers, optButtonDisabled, startButtonDisabled, handleShinmaButton, handleStartButton, handleRestartButton, handleShorteningButton, handleMinusButton, handleClearButton, handleNightmareButton } = props;\n\n  //ボタントリガーアラート\n  interface SnackbarMessage {\n    message: string;\n    severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n    key: number;\n  }\n  \n  const [snackPack, setSnackPack] = useState<SnackbarMessage[]>([]);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [messageInfo, setMessageInfo] = useState<SnackbarMessage | undefined>(undefined);\n\n  useEffect(() => {\n    if (snackPack.length && !messageInfo) {\n      // Set a new snack when we don't have an active one\n      setMessageInfo({ ...snackPack[0] });\n      setSnackPack((prev) => prev.slice(1));\n      setSnackbarOpen(true);\n    } else if (snackPack.length && messageInfo && snackbarOpen) {\n      // Close an active snack when a new one is added\n      setSnackbarOpen(false);\n    }\n  }, [snackPack, messageInfo, snackbarOpen]);\n\n  const handleSnackbarOpen = (message: string, severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined) => {\n    //setSnackbarOpen(true);\n    setSnackPack((prev) => [...prev, { message, severity, key: new Date().getTime() }]);\n  }\n\n  const handleSnackbarClose = (reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n\n  const handleExited = () => {\n    setMessageInfo(undefined);\n  };\n\n  const handleShinmaButtonWithSnack = () => {\n    handleShinmaButton();\n    handleSnackbarOpen(\"神魔効果タイマー開始。\", \"info\");\n  }\n\n  const handleRestartButtonWithSnack = () => {\n    handleRestartButton();\n    handleSnackbarOpen(\"[逆刻] 起動メア巻き戻し。\", \"info\");\n  }\n\n  const handleShorteningButtonWithSnack = () => {\n    handleShorteningButton();\n    handleSnackbarOpen(\"[順刻] 起動メア60秒減少。\", \"info\");\n  }\n\n  const handleMinusButtonWithSnack = () => {\n    handleMinusButton();\n    handleSnackbarOpen(\"-1秒しました。\", \"success\");\n  }\n\n  const handleClearButtonWithSnack = () => {\n    handleClearButton();\n    handleSnackbarOpen(\"クリアしました。\", \"success\");\n  }\n\n  return(\n    <div tw='p-2'>\n      <h6>タイマー設定</h6>\n      <div>\n        <div tw='flex flex-row justify-between items-center px-4'>\n          <div tw='flex flex-col m-1'>\n            <div tw='inline-flex flex-row mb-1'>\n              <div tw='relative h-16 rounded-l-md overflow-hidden'>\n                <input\n                  type='checkbox'\n                  id='trigger-5s'\n                  tw='w-16 h-16 box-border appearance-none cursor-pointer transition ease focus:outline-none focus-visible:ring border border-gray-400\n                    hover:bg-focus checked:bg-disabled dark:checked:bg-darkhover\n                    rounded-l-md'\n                />\n                <div tw='absolute left-0 top-0 w-full h-full -z-1'>\n                  <AnyImage filename='images/cards/CardS5975.png' />\n                </div>\n              </div>\n              <div tw='relative h-16 rounded-r-md overflow-hidden'>\n                <input\n                  type='checkbox'\n                  id='trigger-5s'\n                  tw='w-16 h-16 box-border appearance-none cursor-pointer transition ease focus:outline-none focus-visible:ring border border-gray-400\n                    hover:bg-focus checked:bg-disabled dark:checked:bg-darkhover\n                    rounded-r-md border-l-0'\n                />\n                <div tw='absolute left-0 top-0 w-full h-full -z-1'>\n                  <AnyImage filename='images/cards/CardS7549.png' />\n                </div>\n              </div>\n            </div>\n            <div tw='inline-flex'>\n              <label\n                htmlFor='trigger-5s'\n                tw='w-16 text-sm text-center cursor-pointer overflow-hidden'\n              >\n                3rdユノ\n              </label>\n              <label\n                htmlFor='trigger-90s'\n                tw='w-16 text-sm text-center cursor-pointer overflow-hidden'\n              >\n                サルト\n              </label>\n            </div>\n          </div>\n          <div>\n            <button\n              tw='text-2xl bg-blue-600 text-white rounded-lg py-2 px-4 transition ease select-none hover:bg-blue-800 disabled:bg-gray-400 focus:outline-none focus-visible:ring'\n              onClick={() => handleShinmaButtonWithSnack()}\n            >\n              神魔効果開始\n            </button>\n          </div>\n        </div>\n        <div tw='w-full px-2'>\n          <button\n            tw='w-full text-4xl bg-lightblue-500 text-white rounded-2xl p-6 transition ease select-none hover:bg-lightblue-700 disabled:bg-gray-400 focus:outline-none focus-visible:ring'\n            onClick={() => handleStartButton()}\n            disabled={startButtonDisabled}\n          >\n            ナイトメア準備\n          </button>\n        </div>\n        <div>\n          <div tw='flex justify-between p-2'>\n            <div tw='flex'>\n              <div tw='flex flex-col'>\n                <button\n                  tw='relative w-16 h-16 items-center rounded-full p-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition ease select-none hover:bg-focus active:bg-active disabled:bg-disabled focus:outline-none focus-visible:ring overflow-hidden'\n                  id='res-restart'\n                  onClick={() => handleRestartButtonWithSnack()}\n                  disabled={optButtonDisabled}\n                >\n                  <div tw='absolute -top-2 -left-2 w-20 h-20 -z-1'>\n                    <AnyImage filename='images/cards/CardS6416.png' />\n                  </div>\n                </button>\n                <label\n                  htmlFor='res-restart'\n                  tw='w-full text-sm text-center cursor-pointer overflow-hidden'\n                >\n                  ロボンゴ\n                </label>\n              </div>\n              <div tw='flex flex-col'>\n                <button\n                  tw='relative w-16 h-16 items-center rounded-full p-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition ease select-none hover:bg-focus active:bg-active disabled:bg-disabled focus:outline-none focus-visible:ring overflow-hidden'\n                  id='res-shortening'\n                  onClick={() => handleShorteningButtonWithSnack()}\n                  disabled={optButtonDisabled}\n                >\n                  <div tw='absolute -top-2 -left-2 w-20 h-20 -z-1'>\n                    <AnyImage filename='images/cards/CardS2672.png' />\n                  </div>\n                </button>\n                <label\n                  htmlFor='res-shortening'\n                  tw='w-full text-sm text-center cursor-pointer overflow-hidden'\n                >\n                  ガリア\n                </label>\n              </div>\n              <div tw='flex flex-col'>\n                <button\n                  tw='w-16 h-16 items-center bg-emerald-500 text-white rounded-full px-2 py-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition ease select-none hover:bg-emerald-700 disabled:bg-gray-400 focus:outline-none focus-visible:ring'\n                  id='res-minus'\n                  onClick={() => handleMinusButtonWithSnack()}\n                  disabled={optButtonDisabled}\n                >\n                  <span tw='block text-center'>-1</span>\n                </button>\n                <label\n                  htmlFor='res-minus'\n                  tw='w-full text-sm text-center cursor-pointer overflow-hidden'\n                >\n                  微調整\n                </label>\n              </div>\n            </div>\n            <button\n              tw='flex h-16 items-center bg-rose-600 text-white rounded-md px-4 py-1 sm:px-4 sm:py-2 sm:m-2 transition ease select-none hover:bg-rose-800 focus:outline-none focus-visible:ring'\n              onClick={() => handleClearButtonWithSnack()}\n            >\n              <Trash />\n              <span tw='sm:block hidden'>クリア</span>\n            </button>\n          </div>\n        </div>\n        <div>\n          <NightmareTabs handleNightmareButton={handleNightmareButton} />\n        </div>\n      </div>\n    </div>\n  )\n};\n  \nexport default TimerSettingTable;\n"],"sourceRoot":""}