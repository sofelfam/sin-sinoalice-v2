{"version":3,"sources":["webpack:///./src/pages/calc/combo/combo-table.tsx"],"names":["ActionType","reducer","state","action","value","newcombolists","combolists","prevValue","Number","newList","loop","combo10","combo5","combo0","valid","ComboInput","inputType","label","index","dispatch","handleTextFieldChanges","useCallback","type","valueInput","val","handleSpinnerButton","valueSpinner","htmlFor","id","tabIndex","data-action","onClick","onChange","e","ToggleValid","checked","ActionButtons","combolist","aria-label","CombolistWrapper","props","ComboList","comboSubtotal","useMemo","turnsTotal","spentTime","weaponsTotal","css","INITIAL_STATE","useReducer","comboSum","pre","x","comboCount","bonus","a","b","comboBonus","key","i"],"mappings":"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","file":"component---src-pages-calc-combo-combo-table-tsx-ef95d82bf3fcd1db39da.js","sourcesContent":["import { css } from '@emotion/core';\nimport React, { Dispatch, useCallback, useMemo, useReducer } from 'react';\nimport { Divider } from 'src/components';\nimport { AddIcon, DuplicateIcon, Trash } from 'src/components/icons';\nimport 'twin.macro';\n\ninterface listProps {\n  [key: string]: boolean | number;\n  valid: boolean;\n  loop: number;\n  combo0: number;\n  combo5: number;\n  combo10: number;\n}\n\ninterface State {\n  combolists: listProps[];\n};\n\ntype Action = \n  | {\n      type: ActionType.ACTION_INPUT_TEXT;\n      inputType: string;\n      index: number;\n      valueInput: number;\n    }\n  | {\n      type: ActionType.ACTION_CHANGE_SPINNER;\n      inputType: string;\n      index: number;\n      valueSpinner: number\n    }\n  | {\n      type: ActionType.ACTION_TOGGLE_LIST;\n      index: number;\n    }\n  | {\n      type: ActionType.ACTION_ADD_LIST;\n      newList: [number, number, number, number, boolean];\n    }\n  | {\n      type: ActionType.ACTION_REMOVE_LIST;\n      index: number;\n    }\n\n\nenum ActionType {\n  ACTION_INPUT_TEXT = 'input',\n  ACTION_CHANGE_SPINNER = 'spinner',\n  ACTION_TOGGLE_LIST = 'toggle',\n  ACTION_ADD_LIST = 'addlist',\n  ACTION_REMOVE_LIST = 'removelist',\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.ACTION_INPUT_TEXT: {\n      const value = (action.valueInput < 0 ? 0 : (action.valueInput > 20 ? 20 : action.valueInput));\n      const newcombolists = [...state.combolists];\n      newcombolists[action.index][action.inputType] = value;\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_CHANGE_SPINNER: {\n      const newcombolists = [...state.combolists];\n      const prevValue = Number(newcombolists[action.index][action.inputType]);\n      newcombolists[action.index][action.inputType] = prevValue + action.valueSpinner < 0 ? 0 : (prevValue + action.valueSpinner > 20 ? 20 : prevValue + action.valueSpinner);\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_TOGGLE_LIST: {\n      const newcombolists = [...state.combolists];\n      newcombolists[action.index].valid = !state.combolists[action.index].valid;\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_ADD_LIST: {\n      const newList = state.combolists;\n      const newcombolists = [...newList, {\n        loop: action.newList[0],\n        combo10: action.newList[1],\n        combo5: action.newList[2],\n        combo0: action.newList[3],\n        valid: action.newList[4],\n      }];\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_REMOVE_LIST: {\n      state.combolists.splice(action.index, 1);\n      return {\n        ...state,\n        combolists: state.combolists\n      };\n    }\n  }\n};\n\nconst ComboInput: React.FCX<{\n  inputType: string;\n  label: string;\n  index: number;\n  value: number;\n  dispatch: Dispatch<Action>;\n}> = React.memo(({ inputType, label, value, index, dispatch }): JSX.Element => {\n\n  const handleTextFieldChanges = useCallback((index: number, id: string, val: number) => {\n    dispatch({ type: ActionType.ACTION_INPUT_TEXT, index: index, inputType: id, valueInput: val});\n  }, [value]);\n\n  const handleSpinnerButton = useCallback((index: number, id: string, val: number) => {\n    dispatch({ type: ActionType.ACTION_CHANGE_SPINNER, index: index, inputType: id, valueSpinner: val});\n  }, [value]);\n  \n  return (\n    <div tw='flex flex-col'>\n      <label htmlFor={`${inputType}-${index}`} tw='text-lg'>{label}</label>\n      <div tw='flex flex-row h-10 w-full rounded-lg relative bg-transparent'>\n        <button\n          id={`${inputType}-${index}-decrement`}\n          tabIndex={-1}\n          data-action='decrement'\n          tw='bg-gray-300 text-gray-600 hover:(text-gray-700 bg-gray-400) h-full w-6 rounded-l cursor-pointer transition ease focus:outline-none'\n          onClick={() => handleSpinnerButton(index, inputType, -1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-text-top'>−</span>\n        </button>\n        <input\n          type='number'\n          id={`${inputType}-${index}`}\n          tw='outline-none focus:outline-none text-center w-10 bg-gray-300 font-semibold hover:text-black focus:text-black flex items-center text-gray-700 outline-none'\n          value={value}\n          onChange={(e) => handleTextFieldChanges(index, inputType, Number(e.target.value))}\n        />\n        <button\n          id={`${inputType}-${index}-increment`}\n          tabIndex={-1}\n          data-action='increment'\n          tw='bg-gray-300 text-gray-600 hover:(text-gray-700 bg-gray-400) h-full w-6 rounded-r cursor-pointer transition ease focus:outline-none'\n          onClick={() => handleSpinnerButton(index, inputType, 1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-top'>+</span>\n        </button>\n      </div>\n    </div>\n  );\n});\n\nconst ToggleValid: React.FCX<{\n  valid: boolean;\n  index: number;\n  dispatch: Dispatch<Action>;\n}> = React.memo(({ valid, index, dispatch }) => (\n  <div tw='absolute top-6 right-4 inline-block w-14 align-middle select-none transition duration-200 ease-in'>\n    <input\n      type='checkbox'\n      id={`validSwitch-${index}`}\n      checked={valid}\n      tw='absolute block -top-1 left-0 w-8 h-8 border-4 rounded-full appearance-none cursor-pointer focus:outline-none focus-visible:ring shadow-2xl\n        border-gray-500 dark:border-white bg-gray-500 dark:bg-white hover:ring-8 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10\n        checked:left-6 checked:border-green-500 dark:checked:border-green-300 checked:bg-green-500 dark:checked:bg-green-300 checked:ring-emerald-400 checked:ring-opacity-10\n        transition transition-locate'\n      onChange={() => dispatch({ type: ActionType.ACTION_TOGGLE_LIST, index: index})}\n    />\n    <label\n      htmlFor={`validSwitch-${index}`}\n      tw='block h-6 align-middle overflow-hidden text-gray-300 bg-gray-300 rounded-full cursor-pointer dark:text-gray-400 dark:bg-gray-400 dark:border-gray-400 border-gray-300 border-2'\n    >\n      valid\n    </label>\n  </div>\n));\n\nconst ActionButtons: React.FCX<{\n  combolist: listProps;\n  index: number;\n  dispatch: Dispatch<Action>;\n}> = React.memo(({ combolist, index, dispatch }) => (\n  <div tw='flex items-center ml-2 md:ml-8 lg:ml-16'>\n    <button\n      type='button'\n      aria-label='Duplicate'\n      id={`addButton-${index}`}\n      tw='flex items-center bg-lightblue-500 text-white rounded-md p-1 sm:px-4 sm:py-2 m-1 sm:m-2 transition ease select-none hover:bg-lightblue-700 focus:outline-none'\n      onClick={() => dispatch({ type: ActionType.ACTION_ADD_LIST, newList: [combolist.loop, combolist.combo10, combolist.combo5, combolist.combo0, combolist.valid] })}\n    >\n      <DuplicateIcon />\n      <span tw='sm:ml-2 sm:block hidden'>複製</span>\n    </button>\n    <button\n      type='button'\n      aria-label='Delete'\n      id={`deleteButton-${index}`}\n      tw='flex items-center bg-rose-600 text-white rounded-md p-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition ease select-none hover:bg-rose-800 focus:outline-none'\n      onClick={() => dispatch({ type: ActionType.ACTION_REMOVE_LIST, index: index})}\n    >\n      <Trash />\n      <span tw='sm:ml-2 sm:block hidden'>削除</span>\n    </button>\n  </div>\n));\n\nconst CombolistWrapper: React.FC = (props) => {\n  return <div tw='transition transition-filter ease duration-75' {...props}>{props.children}</div>\n}\n\nconst ComboList: React.FCX<{\n  combolist: listProps;\n  index: number;\n  dispatch: Dispatch<Action>;\n}> = (({ combolist, index, dispatch }) => {\n  const comboSubtotal = useMemo(() => {\n    return (combolist.combo5 * 6 + combolist.combo10 * 11 + combolist.combo0 * 1) * combolist.loop;\n  }, [combolist.combo5, combolist.combo10, combolist.combo0, combolist.loop]);\n  const turnsTotal = useMemo(() => {\n    return (combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1) * combolist.loop + (combolist.loop - 1)*1;\n  }, [combolist.combo5, combolist.combo10, combolist.combo0, combolist.loop]);\n  const spentTime = useMemo(() => {\n    return 4 * ((combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1) * combolist.loop) + (combolist.loop - 1)*6\n  }, [combolist.combo5, combolist.combo10, combolist.combo0, combolist.loop])\n  const weaponsTotal = useMemo(() => {\n    return combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1;\n  }, [combolist.combo5, combolist.combo10, combolist.combo0]);\n \n  return(\n    <>\n      <CombolistWrapper\n        css={!combolist.valid && css`filter: brightness(66%);backdrop-filter: brightness(66%);`}\n      >\n        <div tw='flex flex-wrap relative w-full p-3.5 sm:space-x-4'>\n          <div tw='flex flex-row items-center space-x-4'>\n            <div>\n              {index+1}\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>コンボ小計:</span>\n              <span tw='font-bold'>{comboSubtotal}</span>\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>ターン数:</span>\n              <span tw='font-bold'>{turnsTotal} ({spentTime}s)</span>\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>本数:</span>\n              <span tw='font-bold'>{weaponsTotal}</span>\n            </div>\n          </div>\n          <div tw='flex flex-row w-full sm:w-max justify-between'>\n            <div tw='flex flex-row space-x-2'>\n              <ComboInput\n                inputType={'loop'}\n                label='周回数'\n                index={index}\n                value={combolist.loop}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo5'}\n                label='コンボ+5'\n                index={index}\n                value={combolist.combo5}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo10'}\n                label='コンボ+10'\n                index={index}\n                value={combolist.combo10}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo0'}\n                label='その他'\n                index={index}\n                value={combolist.combo0}\n                dispatch={dispatch}\n              />\n            </div>\n            <ActionButtons combolist={combolist} index={index} dispatch={dispatch} />\n            <ToggleValid valid={combolist.valid} index={index} dispatch={dispatch} />\n          </div>\n        </div>\n      </CombolistWrapper>\n    </>\n  );\n});\n\nconst INITIAL_list: listProps = {\n  loop: 1,\n  combo10: 4,\n  combo5: 14,\n  combo0: 2,\n  valid: true,\n};\n\nconst INITIAL_STATE: State = {\n  combolists: [INITIAL_list]\n}\n\nconst ComboTable = () => {\n  const [{ combolists }, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  const comboSum = combolists.reduce((pre, x) => pre + (x.valid ? 1 : 0) * (x.combo5 * 6 + x.combo10 * 11 + x.combo0 * 1) * x.loop, 0);\n  const comboCount = combolists.filter((x) => x.valid === true).length;\n  const comboBonus = () => {\n    const combo = comboSum;\n\n    let bonus = 100000;\n    const a = combo - 200;\n    if (a < 0) return (bonus += combo * 70) / 100000;\n    const b = a - 300;\n    if (b < 0) return (bonus += 200 * 70 + a * 50) / 100000;\n    const c = b > 500 ? 500 : b;\n    return (bonus += 200 * 70 + 300 * 50 + c * 35) / 100000;\n  };\n\n  return(\n    <>\n      <div>\n        <div tw='flex items-center p-4 space-x-4'>\n          <div tw='flex flex-col'>\n            <span>コンボ総数:</span>\n            <span tw='font-bold'>{comboSum}</span>\n          </div>\n          <div tw='flex flex-col'>\n            <span>コンボ人数:</span>\n            <span tw='font-bold'>{comboCount}</span>\n          </div>\n          <div tw='flex flex-col'>\n            <span>コンボ倍率:</span>\n            <span tw='font-bold'>{comboBonus()}</span>\n          </div>\n          <button\n            type='button'\n            tw='flex items-center bg-lightblue-500 text-white rounded-md px-4 py-2 m-2 transition ease select-none hover:bg-lightblue-700 focus:outline-none'\n            onClick={() => dispatch({ type: ActionType.ACTION_ADD_LIST, newList: [1, 4, 14, 2, true] })}\n          >\n            <AddIcon />\n            <span tw='ml-2'>追加</span>\n          </button>\n        </div>\n        <Divider />\n        {combolists.map((combolist: listProps, i: number) => {\n          return (\n            <div key={`combolist-${i}`}>\n              <ComboList index={i} combolist={combolist} dispatch={dispatch} />\n              <Divider />\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default ComboTable;\n"],"sourceRoot":""}