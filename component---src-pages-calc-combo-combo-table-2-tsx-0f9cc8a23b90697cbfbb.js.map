{"version":3,"sources":["webpack:///./src/pages/calc/combo/combo-table2.tsx"],"names":["ActionType","reducer","state","action","newcombolists","combolists","newList","loop","combo10","combo5","combo0","valid","ComboInput","inputType","label","combolist","index","dispatch","console","handleTextFieldChanges","useCallback","rawId","e","id","n","Number","value","type","htmlFor","tabIndex","data-action","onChange","ComboList","key","aria-label","onClick","checked","p","INITIAL_STATE","useReducer"],"mappings":"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","file":"component---src-pages-calc-combo-combo-table-2-tsx-0f9cc8a23b90697cbfbb.js","sourcesContent":["import React, { Dispatch, useCallback, useReducer } from 'react';\nimport { Divider } from 'src/components';\nimport { AddIcon, DuplicateIcon, Trash } from 'src/components/icons';\nimport 'twin.macro';\n\ninterface listProps {\n  [key: string]: boolean | number;\n  valid: boolean;\n  loop: number;\n  combo0: number;\n  combo5: number;\n  combo10: number;\n}\n\ninterface State {\n  combolists: listProps[];\n};\n\ntype Action = \n  | {\n      type: ActionType.ACTION_INPUT_TEXT;\n      index: number;\n      inputType: string;\n      value: number;\n//      event: React.ChangeEvent<HTMLInputElement>;\n    }\n  | {\n      type: ActionType.ACTION_TOGGLE_LIST;\n      index: number;\n    }\n  | {\n      type: ActionType.ACTION_ADD_LIST;\n      newList: [number, number, number, number, boolean];\n    }\n  | {\n      type: ActionType.ACTION_REMOVE_LIST;\n      index: number;\n    }\n\n\nenum ActionType {\n  ACTION_INPUT_TEXT = 'input',\n  ACTION_TOGGLE_LIST = 'toggle',\n  ACTION_ADD_LIST = 'addlist',\n  ACTION_REMOVE_LIST = 'removelist',\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.ACTION_INPUT_TEXT: {\n    //   const rawId = action.event.target.id;\n    //   const id = rawId.slice(0, rawId.indexOf('-'));\n    //   const newcombolists = [...state.combolists];\n    //   newcombolists[action.index][id] = Number(action.event.target.value);\n      const newcombolists = [...state.combolists];\n      newcombolists[action.index][action.inputType] = action.value;\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_TOGGLE_LIST: {\n      const newcombolists = [...state.combolists];\n      newcombolists[action.index].valid = !state.combolists[action.index].valid;\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_ADD_LIST: {\n      const newList = state.combolists;\n      const newcombolists = [...newList, {\n        loop: action.newList[0],\n        combo10: action.newList[1],\n        combo5: action.newList[2],\n        combo0: action.newList[3],\n        valid: action.newList[4],\n      }];\n      return {\n        ...state,\n        combolists: newcombolists\n      };\n    }\n    case ActionType.ACTION_REMOVE_LIST: {\n      state.combolists.splice(action.index, 1);\n      return {\n        ...state,\n        combolists: state.combolists\n      };\n    }\n  }\n};\n\nconst ComboInput: React.FCX<{\n  inputType: string;\n  label: string;\n  index: number;\n  combolist: listProps;\n  dispatch: Dispatch<Action>;\n}> = (({ inputType, label, combolist, index, dispatch }): JSX.Element => {\n  console.log('??')\n\n  const handleTextFieldChanges = useCallback((e: any, index: number) => {\n    const rawId = e.target.id;\n    const id = rawId.slice(0, rawId.indexOf('-'));\n    const n = Number(e.target.value);\n    const value = (n < 0 ? 0 : (n > 20 ? 20 : n));\n    dispatch({ type: ActionType.ACTION_INPUT_TEXT, index: index, inputType: id, value: value});\n  }, [combolist]);\n  \n  return (\n    <div tw='flex flex-col'>\n      <label htmlFor={`${inputType}-${index}`} tw='text-lg'>{label}</label>\n      <div tw='flex flex-row h-10 w-full rounded-lg relative bg-transparent'>\n        <button\n          id={`${inputType}-${index}-decrement`}\n          tabIndex={-1}\n          data-action='decrement'\n          tw='bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-6 rounded-l cursor-pointer focus:outline-none'\n          //onClick={(event) => handleSpinnerButton(event, combolist, -1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-text-top'>−</span>\n        </button>\n        <input\n          type='number'\n          id={`${inputType}-${index}`}\n          tw='outline-none focus:outline-none text-center w-10 bg-gray-300 font-semibold hover:text-black focus:text-black flex items-center text-gray-700 outline-none'\n          value={Number(combolist[inputType])}\n          onChange={(e) => handleTextFieldChanges(e, index)}\n//          onChange={(e) => dispatch({ type: ActionType.ACTION_INPUT_TEXT, index: index, event: e})}\n        />\n        <button\n          id={`${inputType}-${index}-increment`}\n          tabIndex={-1}\n          data-action='increment'\n          tw='bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-6 rounded-r cursor-pointer focus:outline-none'\n          //onClick={(event) => handleSpinnerButton(event, combolist, 1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-top'>+</span>\n        </button>\n      </div>\n    </div>\n  );\n});\n\nconst ComboList: React.FCX<{\n  combolist: listProps;\n  index: number;\n  dispatch: Dispatch<Action>;\n}> = React.memo(({ combolist, index, dispatch }) => {\n  console.log('!')\n \n  return(\n    <>\n      <div key={`combolist-${index}`}>\n        <div tw='flex flex-wrap relative w-full p-3.5 sm:space-x-4'>\n          <div tw='flex flex-row items-center space-x-4'>\n            <div>\n              {index+1}\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>コンボ小計:</span>\n              <span tw='font-bold'>{(combolist.combo5 * 6 + combolist.combo10 * 11 + combolist.combo0 * 1) * combolist.loop}</span>\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>ターン数:</span>\n              <span tw='font-bold'>{((combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1) * combolist.loop + (combolist.loop - 1)*1)} ({4 * ((combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1) * combolist.loop) + (combolist.loop - 1)*6}s)</span>\n            </div>\n            <div tw='flex flex-col w-32'>\n              <span>本数:</span>\n              <span tw='font-bold'>{combolist.combo5*1 + combolist.combo10*1 + combolist.combo0*1}</span>\n            </div>\n          </div>\n          <div tw='flex flex-row w-full sm:w-max justify-between'>\n            <div tw='flex flex-row space-x-2'>\n              <ComboInput\n                inputType={'loop'}\n                label='周回数'\n                index={index}\n                combolist={combolist}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo5'}\n                label='コンボ+5'\n                index={index}\n                combolist={combolist}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo10'}\n                label='コンボ+10'\n                index={index}\n                combolist={combolist}\n                dispatch={dispatch}\n              />\n              <ComboInput\n                inputType={'combo0'}\n                label='その他'\n                index={index}\n                combolist={combolist}\n                dispatch={dispatch}\n              />\n            </div>\n            <div tw='flex items-center ml-2 md:ml-8 lg:ml-16'>\n              <button\n                type='button'\n                aria-label='Duplicate'\n                id={`addButton-${index}`}\n                tw='flex items-center bg-lightblue-500 text-white rounded-md p-1 sm:px-4 sm:py-2 m-1 sm:m-2 transition ease select-none hover:bg-lightblue-700 focus:outline-none focus:ring'\n                onClick={() => dispatch({ type: ActionType.ACTION_ADD_LIST, newList: [combolist.loop, combolist.combo10, combolist.combo5, combolist.combo0, true] })}\n              >\n                <DuplicateIcon />\n                <span tw='sm:ml-2 sm:block hidden'>複製</span>\n              </button>\n              <button\n                type='button'\n                aria-label='Delete'\n                id={`deleteButton-${index}`}\n                tw='flex items-center bg-rose-600 text-white rounded-md p-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition ease select-none hover:bg-rose-800 focus:outline-none focus:ring'\n                onClick={() => dispatch({ type: ActionType.ACTION_REMOVE_LIST, index: index})}\n              >\n                <Trash />\n                <span tw='sm:ml-2 sm:block hidden'>削除</span>\n              </button>\n            </div>\n            <div tw='absolute top-6 right-4 inline-block w-14 align-middle select-none transition duration-200 ease-in'>\n              <input\n                type='checkbox'\n                id={`validSwitch-${index}`}\n                checked={combolist.valid}\n                tw='absolute block -top-1 left-0 w-8 h-8 border-4 rounded-full appearance-none cursor-pointer focus:outline-none focus-visible:ring shadow-2xl\n                  border-gray-500 dark:border-white bg-gray-500 dark:bg-white hover:ring-8 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10\n                  checked:left-6 checked:border-green-500 dark:checked:border-green-300 checked:bg-green-500 dark:checked:bg-green-300 checked:ring-emerald-400 checked:ring-opacity-10\n                  transition transition-locate'\n                onClick={() => dispatch({ type: ActionType.ACTION_TOGGLE_LIST, index})}\n              />\n              <label\n                htmlFor={`validSwitch-${index}`}\n                tw='block h-6 align-middle overflow-hidden text-gray-300 bg-gray-300 rounded-full cursor-pointer dark:text-gray-400 dark:bg-gray-400 dark:border-gray-400 border-gray-300 border-2'\n              >\n                valid\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n},\n(p, n) => {\n  console.log('prev: '+p.combolist.valid)\n  console.log('next: '+n.combolist.valid)\n  return p.combolist.valid === n.combolist.valid\n});\n\n\n// valid: boolean;\n// loop: number;\n// combo0: number;\n// combo5: number;\n// combo10: number;\n\nconst INITIAL_list: listProps = {\n  loop: 1,\n  combo10: 2,\n  combo5: 14,\n  combo0: 4,\n  valid: true,\n};\n\nconst INITIAL_STATE: State = {\n  combolists: [INITIAL_list]\n}\n\nconst ComboBonusComponent = React.memo((props: {comboBonus: () => number}) => {\n  return (\n    <div tw='flex flex-col'>\n      <span>コンボ倍率:</span>\n      <span tw='font-bold'>{props.comboBonus()}</span>\n    </div>\n  );\n});\n\nconst ComboTable = () => {\n  const [{ combolists }, dispatch] = useReducer(reducer, INITIAL_STATE);\n  \n  // const handleTextFieldChanges = (e: any, list: listProps) => {\n  //   const rawId = e.target.id;\n  //   const id = rawId.slice(0, rawId.indexOf('-'));\n    \n  //   setCombolists(combolists.filter((x: listProps) => {\n  //     const n = Number(e.target.value);\n  //     if (x === list && Number.isInteger(x[id])) {\n  //       const v = n < 0 ? 0 : n;\n  //       x[id] = v > 20 ? 20 : v;\n  //     }\n  //     return x;\n  //   }));\n  // }\n\n  // const handleSpinnerButton = (e: any, list: listProps, val: number) => {\n  //   const rawId:string = e.currentTarget.id;\n  //   const id = rawId.slice(0, rawId.indexOf('-'));\n    \n  //   setCombolists(combolists.filter((x: listProps) => {\n  //     if (x === list && typeof x[id] === 'number') {\n  //       const v = Number(x[id]) + val < 0 ? 0 : Number(x[id]) + val;\n  //       x[id] = v > 20 ? 20 : v;\n  //     }\n  //     return x;\n  //   }));\n  // }\n\n  // const ComboSum = combolists.reduce((pre, x) => pre + (x.combo5 * 6 + x.combo10 * 11 + x.combo0 * 1) * x.loop, 0);\n  \n  // const comboBonus = useCallback(() => {\n  //   const combo = ComboSum;\n\n  //   let bonus = 100000;\n  //   const a = combo - 200;\n  //   if (a < 0) return (bonus += combo * 70) / 100000;\n  //   const b = a - 300;\n  //   if (b < 0) return (bonus += 200 * 70 + a * 50) / 100000;\n  //   const c = b > 500 ? 500 : b;\n  //   return (bonus += 200 * 70 + 300 * 50 + c * 35) / 100000;\n  // }, [combolists]);\n\n  return(\n    <>\n      <div>\n        <div tw='flex items-center p-4 space-x-4'>\n          <div tw='flex flex-col'>\n            <span>コンボ総数:</span>\n            {/* <span tw='font-bold'>{ComboSum}</span> */}\n          </div>\n          <div tw='flex flex-col'>\n            <span>コンボ人数:</span>\n            {/* <span tw='font-bold'>{combolists.length}</span> */}\n          </div>\n          {/* <ComboBonusComponent comboBonus={comboBonus} /> */}\n          <button\n            type='button'\n            tw='flex items-center bg-lightblue-500 text-white rounded-md px-4 py-2 m-2 transition ease select-none hover:bg-lightblue-700 focus:outline-none focus:ring'\n            onClick={() => dispatch({ type: ActionType.ACTION_ADD_LIST, newList: [1, 4, 14, 2, true] })}\n          >\n            <AddIcon />\n            <span tw='ml-2'>追加</span>\n          </button>\n        </div>\n        {combolists.map((combolist: listProps, i: number) => {\n          return (\n            <ComboList key={i} index={i} combolist={combolist} dispatch={dispatch} />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default ComboTable;\n"],"sourceRoot":""}