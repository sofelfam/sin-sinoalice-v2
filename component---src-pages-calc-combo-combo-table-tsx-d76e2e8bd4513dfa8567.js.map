{"version":3,"sources":["webpack:///./src/pages/calc/combo/combo-table.tsx"],"names":["ComboInput","props","inputType","label","list","index","handleTextFieldChanges","handleSpinnerButton","id","tabIndex","data-action","onClick","event","type","value","Number","onChange","ComboList","combolists","addlist","deletelist","handleSwitchChanges","key","checked","htmlFor","INITIAL_list","valid","loop","combo0","combo5","combo10","useState","setCombolists","init","ComboSum","pre","x","combo","bonus","a","b","comboBonus","e","rawId","n","v"],"mappings":"mmEAgCMA,EAAa,SAACC,GAAwC,IAClDC,EAA+ED,EAD7B,UACvCE,EAAoEF,EAD7B,MAChCG,EAA6DH,EAD7B,KAC1BI,EAAuDJ,EAD7B,MACnBK,EAAgDL,EAD7B,uBACKM,EAAwBN,EAD7B,oBAG1D,OACE,0BACE,4BADF,GAEE,0BACE,sBACEO,GAAON,EAAL,MADJ,aAEEO,UAFF,EAGEC,cAHF,kBAKEC,QAAS,mBAAWJ,EAAoBK,EAAOR,GAAtC,KAET,2BARJ,MAUE,qBACES,KADF,SAEEL,GAAON,EAAL,IAFJ,QAIEY,MAAOC,OAAOX,EAJhB,IAKEY,SAAU,mBAAWV,EAAuBM,EAAlC,MAEZ,sBACEJ,GAAON,EAAL,MADJ,aAEEO,UAFF,EAGEC,cAHF,kBAKEC,QAAS,mBAAWJ,EAAoBK,EAAOR,EAAtC,KAET,2BA3BR,S,w0LAkCIa,EAAuC,SAAChB,GAA0B,IAC9DiB,EAAsGjB,EADxC,WAClDkB,EAA0FlB,EADxC,QACzCmB,EAAiFnB,EADxC,WAC7BK,EAAqEL,EADxC,uBACLM,EAA6CN,EADxC,oBACgBoB,EAAwBpB,EADxC,oBAGtE,OACE,8BACE,gBADF,MAEGiB,EAAA,KAAe,qBACd,mBAAKI,IAAG,aAAejB,GACrB,0BACE,0BACE,uBACGA,EAFL,GAIE,0BACE,wBADF,UAEE,4BAAuBD,cAAkBA,UAAnB,EAAuCA,UAAmBA,EANpF,OAQE,0BACE,wBADF,SAEE,4BAAwBA,aAAgBA,UAAjB,EAAkCA,UAAiBA,EAAnD,KAAvB,GAAuFA,OAAD,GAAtF,MAAkHA,aAAgBA,UAAjB,EAAkCA,UAAiBA,EAAxD,OAA5G,GAAkLA,OAAD,GAVrL,OAYE,0BACE,wBADF,OAEE,2BAAsBA,aAAgBA,UAf5C,EAe6DA,YAG3D,0BACE,eACEF,UADF,OAEEC,MAFF,MAGEC,KAHF,EAIEC,MAJF,EAKEC,uBALF,EAMEC,oBAAqBA,IAEvB,eACEL,UADF,SAEEC,MAFF,QAGEC,KAHF,EAIEC,MAJF,EAKEC,uBALF,EAMEC,oBAAqBA,IAEvB,eACEL,UADF,UAEEC,MAFF,SAGEC,KAHF,EAIEC,MAJF,EAKEC,uBALF,EAMEC,oBAAqBA,IAEvB,eACEL,UADF,SAEEC,MAFF,MAGEC,KAHF,EAIEC,MAJF,EAKEC,uBALF,EAMEC,oBAAqBA,IAEvB,0BACE,sBACEM,KADF,SAEEL,GAAE,aAFJ,QAIEG,QAAS,kBAAMQ,EAAQ,CAACf,EAAD,OAAcA,EAAd,QAA4BA,EAA5B,OAAyCA,EAAvD,SAET,gBANF,MAOE,2BARJ,OAUE,sBACES,KADF,SAEEL,GAAE,gBAFJ,QAIEG,QAAS,kBAAMS,EAAN,KAET,gBANF,MAOE,2BAlDN,QAqDE,0BACE,qBACEP,KADF,WAEEL,GAAE,eAFJ,EAGEe,QAASnB,EAHX,YAQEY,SAAU,kBAAMK,EAAN,MAEZ,qBACEG,QAAO,eADT,SAnFR,YA4FE,gBA7FY,YAoGhBC,EAAe,CACnBC,OADmB,EAEnBC,KAFmB,EAGnBC,OAHmB,EAInBC,OAJmB,GAKnBC,QAAS,G,kpDAyGX,UAtGmB,WAAM,MACaC,mBAAS,CADtB,IAChBb,EADgB,KACJc,EADI,KA+BjBb,EAAU,SAACc,GACfD,EAAc,GAAD,uBAAiB,CAC5BN,OAD4B,EAE5BC,KAAMM,EAAOA,EAAH,GAFkB,EAG5BJ,OAAQI,EAAOA,EAAH,GAHgB,GAI5BH,QAASG,EAAOA,EAAH,GAJe,EAK5BL,OAAQK,EAAOA,EAAH,GAAa,OAwBvBC,EAAWhB,EAAA,QAAkB,qBAAYiB,GAAOC,cAAeA,UAAhB,EAAiCA,UAAgBA,EAAnE,OAAnC,GAEA,OACE,8BACE,uBACE,0BACE,0BACE,wBADF,UAEE,2BAHJ,IAKE,0BACE,wBADF,UAEE,2BAAsBlB,EAP1B,SASE,0BACE,wBADF,UAEE,2BAzBS,SAACmB,GAClB,IAAIC,EAAJ,IACMC,EAAIF,EAAV,IACA,GAAIE,EAAJ,EAAW,OAAQD,GAAD,GAAUD,GAAjB,IACX,IAAMG,EAAID,EAAV,IACA,OAAIC,EAAJ,GAAmBF,GAAS,KAAV,GAAqBC,GAA5B,KACHD,GAAS,KAAV,GAAgCE,GAAvC,IAmB8BC,CAX1B,KAaE,sBACE5B,KADF,eAIEF,QAAS,kBAAMQ,MAEf,gBANF,MAOE,2BArBN,QAwBE,eACED,WADF,EAEEG,oBA9CoB,SAACjB,GAC3B4B,EAAcd,EAAA,QAAkB,SAAAkB,GAE9B,OADIA,IAAJ,IAAgBA,SAAWA,EAAXA,OAChB,OA4CI9B,uBAzFuB,SAACoC,EAAD,GAC7B,IAAMC,EAAQD,SAAd,GACMlC,EAAKmC,UAAeA,UAA1B,MAEAX,EAAcd,EAAA,QAAkB,YAC9B,IAAM0B,EAAI7B,OAAO2B,SAAjB,OACA,GAAIN,OAAcrB,iBAAiBqB,EAAnC,IAA2C,CACzC,IAAMS,EAAID,MAAV,EACAR,KAAQS,QAART,EAEF,cAgFI7B,oBA5EoB,SAACmC,EAAD,KAC1B,IAAMC,EAAeD,gBAArB,GACMlC,EAAKmC,UAAeA,UAA1B,MAEAX,EAAcd,EAAA,QAAkB,YAC9B,GAAIkB,OAAJ,iBAAyBA,EAAP,GAA2B,CAC3C,IAAMS,EAAI9B,OAAOqB,EAAPrB,UAA8BA,OAAOqB,EAAPrB,IAAxC,EACAqB,KAAQS,QAART,EAEF,cAoEIhB,WArDW,SAAChB,GAClB4B,EAAcd,EAAA,QAAkB,SAAAkB,GAAC,OAAIA,IAAJ,OAqD3BjB,QAASA","file":"component---src-pages-calc-combo-combo-table-tsx-d76e2e8bd4513dfa8567.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Divider } from \"src/components\";\nimport { AddIcon, DuplicateIcon, Trash } from \"src/components/icons\";\nimport 'twin.macro';\n\ninterface listProps {\n  [key: string]: boolean | number;\n  valid: boolean;\n  loop: number;\n  combo0: number;\n  combo5: number;\n  combo10: number;\n}\n\ninterface comboListProps {\n  combolists: listProps[];\n  addlist: (init?: number[]) => void;\n  deletelist: (list: listProps) => void;\n  handleTextFieldChanges: (event: React.ChangeEvent<HTMLInputElement>, list: listProps) => void;\n  handleSpinnerButton: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, list: listProps, step: number) => void;\n  handleSwitchChanges: (list: listProps) => void;\n}\n\ninterface comboInputProps {\n  inputType: string;\n  label: string;\n  list: listProps;\n  index: number;\n  handleTextFieldChanges: (event: React.ChangeEvent<HTMLInputElement>, list: listProps) => void;\n  handleSpinnerButton: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, list: listProps, step: number) => void;\n}\n\nconst ComboInput = (props: comboInputProps): JSX.Element => {\n  const { inputType, label, list, index, handleTextFieldChanges, handleSpinnerButton } = props;\n\n  return (\n    <div tw='flex flex-col'>\n      <label tw='text-lg'>{label}</label>\n      <div tw='flex flex-row h-10 w-full rounded-lg relative bg-transparent'>\n        <button\n          id={`${inputType}-${index}-decrement`}\n          tabIndex={-1}\n          data-action='decrement'\n          tw='bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-6 rounded-l cursor-pointer focus:outline-none'\n          onClick={(event) => handleSpinnerButton(event, list, -1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-text-top'>−</span>\n        </button>\n        <input\n          type='number'\n          id={`${inputType}-${index}`}\n          tw='outline-none focus:outline-none text-center w-10 bg-gray-300 font-semibold hover:text-black focus:text-black flex items-center text-gray-700 outline-none'\n          value={Number(list[inputType])}\n          onChange={(event) => handleTextFieldChanges(event, list)}\n        />\n        <button\n          id={`${inputType}-${index}-increment`}\n          tabIndex={-1}\n          data-action='increment'\n          tw='bg-gray-300 text-gray-600 hover:text-gray-700 hover:bg-gray-400 h-full w-6 rounded-r cursor-pointer focus:outline-none'\n          onClick={(event) => handleSpinnerButton(event, list, 1)}\n        >\n          <span tw='m-auto text-2xl font-thin align-top'>+</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ComboList: React.FCX<comboListProps> = (props: comboListProps) => {\n  const { combolists, addlist, deletelist, handleTextFieldChanges, handleSpinnerButton, handleSwitchChanges } = props;\n  \n  return(\n    <>\n      <Divider />\n      {combolists.map((list: listProps, index: number) => (\n        <div key={`combolist-${index}`}>\n          <div tw='flex flex-wrap relative w-full p-3.5 sm:space-x-4'>\n            <div tw='flex flex-row items-center space-x-4'>\n              <div>\n                {index+1}\n              </div>\n              <div tw='flex flex-col w-32'>\n                <span>コンボ小計:</span>\n                <span tw='font-bold'>{(list.combo5 * 6 + list.combo10 * 11 + list.combo0 * 1) * list.loop}</span>\n              </div>\n              <div tw='flex flex-col w-32'>\n                <span>ターン数:</span>\n                <span tw='font-bold'>{((list.combo5*1 + list.combo10*1 + list.combo0*1) * list.loop + (list.loop - 1)*1)} ({4 * ((list.combo5*1 + list.combo10*1 + list.combo0*1) * list.loop) + (list.loop - 1)*6}s)</span>\n              </div>\n              <div tw='flex flex-col w-32'>\n                <span>本数:</span>\n                <span tw='font-bold'>{list.combo5*1 + list.combo10*1 + list.combo0*1}</span>\n              </div>\n            </div>\n            <div tw='flex flex-row space-x-2'>\n              <ComboInput\n                inputType={'loop'}\n                label='周回数'\n                list={list}\n                index={index}\n                handleTextFieldChanges={handleTextFieldChanges}\n                handleSpinnerButton={handleSpinnerButton}\n              />\n              <ComboInput\n                inputType={'combo5'}\n                label='コンボ+5'\n                list={list}\n                index={index}\n                handleTextFieldChanges={handleTextFieldChanges}\n                handleSpinnerButton={handleSpinnerButton}\n              />\n              <ComboInput\n                inputType={'combo10'}\n                label='コンボ+10'\n                list={list}\n                index={index}\n                handleTextFieldChanges={handleTextFieldChanges}\n                handleSpinnerButton={handleSpinnerButton}\n              />\n              <ComboInput\n                inputType={'combo0'}\n                label='その他'\n                list={list}\n                index={index}\n                handleTextFieldChanges={handleTextFieldChanges}\n                handleSpinnerButton={handleSpinnerButton}\n              />\n              <div tw='flex items-center'>\n                <button\n                  type=\"button\"\n                  id={`addButton-${index}`}\n                  tw=\"flex items-center border border-indigo-500 bg-indigo-500 text-white rounded-md p-1 sm:px-4 sm:py-2 m-1 sm:m-2 transition duration-500 ease select-none hover:bg-indigo-600 focus:outline-none focus:ring\"\n                  onClick={() => addlist([list.combo5, list.combo10, list.combo0, list.loop])}\n                >\n                  <DuplicateIcon />\n                  <span tw='sm:ml-2 sm:block hidden'>複製</span>\n                </button>\n                <button\n                  type=\"button\"\n                  id={`deleteButton-${index}`}\n                  tw=\"flex items-center border border-red-500 bg-red-500 text-white rounded-md p-1 sm:px-4 sm:py-2 ml-1 sm:m-2 transition duration-500 ease select-none hover:bg-red-600 focus:outline-none focus:ring\"\n                  onClick={() => deletelist(list)}\n                >\n                  <Trash />\n                  <span tw='sm:ml-2 sm:block hidden'>削除</span>\n                </button>\n              </div>\n              <div tw='absolute top-4 right-4 inline-block w-14 mr-2 align-middle select-none transition duration-200 ease-in'>\n                <input\n                  type='checkbox'\n                  id={`validSwitch-${index}`}\n                  checked={list.valid}\n                  tw='absolute block left-0 w-8 h-8 border-4  rounded-full appearance-none cursor-pointer focus:outline-none focus:ring\n                    border-gray-500 dark:border-white bg-gray-500 dark:bg-white\n                    checked:left-6 checked:border-green-500 dark:checked:border-green-300 checked:bg-green-500 dark:checked:bg-green-300\n                    transition transition-locate'\n                  onChange={() => handleSwitchChanges(list)}\n                />\n                <label\n                  htmlFor={`validSwitch-${index}`}\n                  tw='block h-8 align-middle overflow-hidden text-gray-300 bg-gray-300 rounded-full cursor-pointer dark:text-gray-400 dark:bg-gray-400 dark:border-gray-400 border-gray-300 border-2'\n                >\n                  valid\n                </label>\n              </div>\n            </div>\n          </div>\n          <Divider />\n        </div>\n      ))}\n    </>\n  );\n};\n\nconst INITIAL_list = {\n  valid: true,\n  loop: 1,\n  combo0: 2,\n  combo5: 16,\n  combo10: 2,\n};\n\nconst ComboTable = () => {\n  const [combolists, setCombolists] = useState([INITIAL_list]);\n  \n  const handleTextFieldChanges = (e: any, list: listProps) => {\n    const rawId = e.target.id;\n    const id = rawId.slice(0, rawId.indexOf('-'));\n    \n    setCombolists(combolists.filter((x: listProps) => {\n      const n = Number(e.target.value);\n      if (x === list && Number.isInteger(x[id])) {\n        const v = n < 0 ? 0 : n;\n        x[id] = v > 20 ? 20 : v;\n      }\n      return x;\n    }));\n  }\n\n  const handleSpinnerButton = (e: any, list: listProps, val: number) => {\n    const rawId:string = e.currentTarget.id;\n    const id = rawId.slice(0, rawId.indexOf('-'));\n    \n    setCombolists(combolists.filter((x: listProps) => {\n      if (x === list && typeof x[id] === 'number') {\n        const v = Number(x[id]) + val < 0 ? 0 : Number(x[id]) + val;\n        x[id] = v > 20 ? 20 : v;\n      }\n      return x;\n    }));\n  }\n  \n  \n  const addlist = (init?: number[]) => {\n    setCombolists([...combolists, {\n      valid: true,\n      loop: init ? init[3] : 1,\n      combo5: init ? init[0] : 16,\n      combo10: init ? init[1] : 2,\n      combo0: init ? init[2] : 2,\n    }]);\n  }\n\n  const deletelist = (list: listProps) => {\n    setCombolists(combolists.filter(x => x !== list));\n  }\n\n  const handleSwitchChanges = (list: listProps) => {\n    setCombolists(combolists.filter(x => {\n      if (x === list) x.valid = !x.valid;\n      return x;\n    }));\n  }\n\n  const comboBonus = (combo: number) => {\n    let bonus = 100000;\n    const a = combo - 200;\n    if (a < 0) return (bonus += combo * 70) / 100000;\n    const b = a - 300;\n    if (b < 0) return (bonus += 200 * 70 + a * 50) / 100000;\n    return (bonus += 200 * 70 + 300 * 50 + b * 35) / 100000;\n  }\n\n  const ComboSum = combolists.reduce((pre, x) => pre + (x.combo5 * 6 + x.combo10 * 11 + x.combo0 * 1) * x.loop, 0);\n  \n  return(\n    <>\n      <div>\n        <div tw='flex items-center p-4 space-x-4'>\n          <div tw='flex flex-col'>\n            <span>コンボ総数:</span>\n            <span tw='font-bold'>{ComboSum}</span>\n          </div>\n          <div tw='flex flex-col'>\n            <span>コンボ人数:</span>\n            <span tw='font-bold'>{combolists.length}</span>\n          </div>\n          <div tw='flex flex-col'>\n            <span>コンボ倍率:</span>\n            <span tw='font-bold'>{comboBonus(ComboSum)}</span>\n          </div>\n          <button\n            type=\"button\"\n            tw=\"flex items-center border border-indigo-500 bg-indigo-500 text-white rounded-md px-4 py-2 m-2 transition duration-500 ease select-none hover:bg-indigo-600 focus:outline-none focus:ring\"\n            //startIcon={<AddCircleIcon />}\n            onClick={() => addlist()}\n          >\n            <AddIcon />\n            <span tw='ml-2'>追加</span>\n          </button>\n        </div>\n        <ComboList\n          combolists={combolists}\n          handleSwitchChanges={handleSwitchChanges}\n          handleTextFieldChanges={handleTextFieldChanges}\n          handleSpinnerButton={handleSpinnerButton}\n          deletelist={deletelist}\n          addlist={addlist}\n        />\n      </div>\n    </>\n  )\n};\n\nexport default ComboTable;\n"],"sourceRoot":""}